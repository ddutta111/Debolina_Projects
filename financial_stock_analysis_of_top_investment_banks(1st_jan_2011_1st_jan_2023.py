# -*- coding: utf-8 -*-
"""Financial Stock Analysis of Top Investment Banks(1st Jan 2011 - 1st Jan 2023.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1CMhbqgqalwP14-LzNhlhac3Uh7Bf-ik-

## Financial Stock Data Analysis of Top Investment Banks in the US and Europe

This is an exploratory data analysis of six investment banks' from stock prices from NYSE from period Jan 2011 - Jan 2023 with focus on the covid time-period (2020-2022)

# Importing the Libraries #

We stared to collect the data from yfinance by using yfinance library and other imported other libraries which we will required for the subsequent stock performance analysis visuatization.
"""

!pip install yfinance

# Commented out IPython magic to ensure Python compatibility.
import pandas as pd
import numpy as np
import datetime
import matplotlib.pyplot as plt
import seaborn as sns
# %matplotlib inline
import pandas_datareader.data as web
import yfinance as yf

"""## **Importing the Dataset**

We download data from Yahoo Finance by using yfinance.The following investment banks' stocks data are collected:

*   J P Morgan & Chase Co
*   Morgan Stanley
*   UBS
*   Barclays Bank Plc
*   Goldman Sach
*   HSBC

**The Stocks data time period is from Jan 1st 2011 - Jan 1st 2023.Setting each bank to a different data frame with the variable name for that bank as its ticker symbol.**












"""

# Barclays Bank Plc.
BCS = yf.download("BCS", start = "2011-01-01", end = "2023-01-01")
# Goldman Sach
GS = yf.download("GS", start = "2011-01-01", end = "2023-01-01")
# HSBC.
HSBC = yf.download("HSBC", start = "2011-01-01", end = "2023-01-01")
# J P Morgan & Chase Co.
JPM = yf.download("JPM", start = "2011-01-01", end = "2023-01-01")
# Morgan Stanley
MS = yf.download("MS", start = "2011-01-01", end = "2023-01-01")
# UBS Corp.
UBS = yf.download("UBS", start = "2011-01-01", end = "2023-01-01")

"""Create a list of Bank stock symbols (as strings) in alphabatical order. The list is called: 'tickers'"""

tickers = ['BCS', 'GS', 'HSBC', 'JPM', 'MS', 'UBS']

"""pd.concat function is used to concatenate each bank's data frame together into a single dataframe aclled bank_stocks."""

bank_stocks=pd.concat([JPM, MS, UBS, BCS, GS, HSBC],axis=1,keys=tickers)

"""Setting the Column name levels"""

bank_stocks.columns.names = ["Bank Ticker", "Stock Info"]

"""Print the head of bank_stocks data frame"""

bank_stocks = np.round(bank_stocks, decimals=2)
bank_stocks.head()

"""# **Explorative Data Analysis**

Here, we will look for answers for some important questions in order to understand the performnace of banks' stocks during the given time period in the datase!

# Finding the maximum closing price for each bank's stock throughout the time time period Jan 1st 2011 to Jan 1st 2023
"""

bank_stocks.xs('Close', axis=1, level='Stock Info')

bank_stocks.xs('Close', axis=1, level='Stock Info').max()

"""Finding the returns for each bank stocks in a single data frame.

The returns are calculated as follows:

Rt = Pt − (Pt−1)/ (Pt−1) = Pt / (Pt−1) -1

where, Rt = Return on a stock at time period t
       Pt = Price of the stock at time period t
     Pt−1 = Price of the stock at time period (t-1)
"""

# Creating an empty data frame
returns=pd.DataFrame()

tickers

# Calculating the return for each stock based on percentage change
for tick in tickers:
    returns[tick + ' Return']=bank_stocks[tick]['Close'].pct_change()
returns.head()

"""# What stocks standing out mostly?

#Creating a pairplot in order to figure out and compare the stocks positions throughout the whole time period by using seaborn as the return dataframe.
"""

sns.set_style("whitegrid")
sns.pairplot(returns[1:],diag_kind='hist',diag_kws={'bins': 10})

"""#Using the dataframes, figure out on what date each banks stocks have the best and worst single day returns"""

# Best date of return for each sngle stock over the time period 2011-2022
returns.idxmax()

# Worst Date of return for each single stock from 2011-2022
returns.idxmin()

"""#Riskiest stock over the entire time period 2011 - 2023"""

# JPM is the riskiest stock over the time period with 0.03 std of returns
np.std(returns)

"""#Riskiest stock during the crucial covid period 2020-2021"""

# During crucial covid time period Mar 2020 to Dec 2021 JPM was the riskiest stock with 0.345 std and others were more or less almost similar
returns.loc['2020-03-01':'2021-12-31'].std()

"""#Displot of JMP investment Bank's stock return

Creating Displot by using seaborn of the riskiest stock J P Morgan invetsmnet banks's return and comapartively the least riskiest stock UBS's from 1st Jan 2020 to 31st Dec 2021
"""

plt.figure(figsize=(10,8))
sns.displot(returns.loc['2020-01-01':'2021-12-31']['JPM Return'], bins=75,color='orange')

plt.figure(figsize=(10,8))
sns.displot(returns.loc['2020-01-01':'2021-12-31']['UBS Return'], bins=75,color='skyblue')

"""#**More Visualizations of data: Line plot, Cluster Map and ilpot**

# Importing plotty and cufflinks libraries
"""

!pip install plotly

!pip install cufflinks

import plotly
import cufflinks as cf
cf.go_offline()
import plotly.subplots as sp
import plotly.graph_objects as go
import matplotlib.dates as mdates

bank_stocks.head()

"""# Line Plot showing closing price each bank for entire index of time"""

bank_stocks.xs('Close', axis = 1, level = 'Stock Info').plot(figsize=(12,4))

"""# **Moving Averages**

# Plotting the 30-day rolling moving average for JPM during peak Covid period (2020-2021)
"""

fig=plt.figure(figsize=(12,5))
s = fig.add_subplot(111)
s.xaxis.set_major_formatter(mdates.DateFormatter('%b-%Y'))
bank_stocks['JPM']['Close'].loc['2020-01-01':'2021-12-31'].rolling(window=30).mean().plot(label='30 day average')
bank_stocks['JPM']['Close'].loc['2020-01-01':'2021-12-31'].plot(label='JPM CLOSE')
plt.legend()

"""#Heatmap: To find the correlation between the stocks' closing prices"""

sns.heatmap(bank_stocks.xs('Close',axis=1,level='Stock Info').corr(),annot=True)
# Barclays, Goldman Sach and Morgan Stanley are strongly corelated to each other whereas UBS, HSBC and JP
# Morgan stock returns are corelated to one another during Covid period

"""# Seaborn's cluster map to cluster the correlations together"""

sns.clustermap(bank_stocks.xs('Close',axis=1,level='Stock Info').corr(),annot=True)

"""# Conclusion"""

#This Project is an exploratitory financial data analysis. As a result, we see that during covid period as well as
# throughout 2011 - 2023, JPM is the riskiest stock and UBS is the least risky one.
#However, overall there is not much significant difference among their risk level as we go through their std and
#position of each stock shown by the scatter pair-plots.
#Also, the Seaborn Cluster map shows that BCS, JS and MS are highly positively corelated to each other and UBS,
#JPM and HSBC are corelated to one another.